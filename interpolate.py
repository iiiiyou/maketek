import numpy as np
from scipy.interpolate import NearestNDInterpolator


# Define the source and target points
def alignment(val):
    source_points = np.array(
        [
            [80, 134],
            [262, 134],
            [467, 134],
            [671, 134],
            [875, 134],
            [1079, 134],
            [1283, 134],
            [1487, 134],
            [1691, 134],
            [80, 338],
            [262, 338],
            [467, 338],
            [671, 338],
            [875, 338],
            [1079, 338],
            [1283, 338],
            [1487, 338],
            [1691, 338],
            [80, 542],
            [262, 542],
            [467, 542],
            [671, 542],
            [875, 542],
            [1079, 542],
            [1283, 542],
            [1487, 542],
            [1691, 542],
            [80, 746],
            [262, 746],
            [467, 746],
            [671, 746],
            [875, 746],
            [1079, 746],
            [1283, 746],
            [1487, 746],
            [1691, 746],
            [80, 950],
            [262, 950],
            [467, 950],
            [671, 950],
            [875, 950],
            [1079, 950],
            [1283, 950],
            [1487, 950],
            [1691, 950],
            [80, 1154],
            [262, 1154],
            [467, 1154],
            [671, 1154],
            [875, 1154],
            [1079, 1154],
            [1283, 1154],
            [1487, 1154],
            [1691, 1154],
            [80, 1356],
            [262, 1356],
            [467, 1356],
            [671, 1356],
            [875, 1356],
            [1079, 1356],
            [1283, 1356],
            [1487, 1356],
            [1691, 1356],
            [80, 1556],
            [262, 1556],
            [467, 1556],
            [671, 1556],
            [875, 1556],
            [1079, 1556],
            [1283, 1556],
            [1487, 1556],
            [1691, 1556],
        ]
    )

    target_points = np.array(
        [
            [6, 1],
            [7, 1],
            [8, 1],
            [9, 1],
            [10, 1],
            [11, 1],
            [12, 1],
            [13, 1],
            [14, 1],
            [6, 2],
            [7, 2],
            [8, 2],
            [9, 2],
            [10, 2],
            [11, 2],
            [12, 2],
            [13, 2],
            [14, 2],
            [6, 3],
            [7, 3],
            [8, 3],
            [9, 3],
            [10, 3],
            [11, 3],
            [12, 3],
            [13, 3],
            [14, 3],
            [6, 4],
            [7, 4],
            [8, 4],
            [9, 4],
            [10, 4],
            [11, 4],
            [12, 4],
            [13, 4],
            [14, 4],
            [6, 5],
            [7, 5],
            [8, 5],
            [9, 5],
            [10, 5],
            [11, 5],
            [12, 5],
            [13, 5],
            [14, 5],
            [6, 6],
            [7, 6],
            [8, 6],
            [9, 6],
            [10, 6],
            [11, 6],
            [12, 6],
            [13, 6],
            [14, 6],
            [6, 7],
            [7, 7],
            [8, 7],
            [9, 7],
            [10, 7],
            [11, 7],
            [12, 7],
            [13, 7],
            [14, 7],
            [6, 8],
            [7, 8],
            [8, 8],
            [9, 8],
            [10, 8],
            [11, 8],
            [12, 8],
            [13, 8],
            [14, 8]
        ]
    )

    # Create the NearestNDInterpolator object
    interpolator = NearestNDInterpolator(source_points, target_points)

    if(val[0]==0):
        val[1]=0
        val[2]=0
        return val
    
    elif(val[1]==0):
        z=1
        x=0
        y=0
        return z, x, y
        
    else:
        center_point = val[1:3]

    # Interpolate the query points
        interpolated_values = interpolator(center_point)

        print("inter----------------")

        z=1

        print(interpolated_values)
        x, y = interpolated_values[0]
        return z, x, y
