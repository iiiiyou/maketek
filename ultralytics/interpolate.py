import numpy as np
from scipy.interpolate import NearestNDInterpolator


# Define the source and target points
def alignment(val):
    source_points = np.array(
        [
            [50, 109],
            [150, 109],
            [250, 109],
            [350, 109],
            [450, 109],
            [550, 109],
            [650, 109],
            [750, 109],
            [848, 109],
            [948, 109],
            [1048, 109],
            [50, 209],
            [150, 209],
            [250, 209],
            [350, 209],
            [450, 209],
            [550, 209],
            [650, 209],
            [750, 209],
            [848, 209],
            [948, 209],
            [1048, 209],
            [50, 309],
            [150, 309],
            [250, 309],
            [350, 309],
            [450, 309],
            [550, 309],
            [650, 309],
            [750, 309],
            [848, 309],
            [948, 309],
            [1048, 309],
            [50, 409],
            [150, 409],
            [250, 409],
            [350, 409],
            [450, 409],
            [550, 409],
            [650, 409],
            [750, 409],
            [848, 409],
            [948, 409],
            [1048, 409],
            [50, 509],
            [150, 509],
            [250, 509],
            [350, 509],
            [450, 509],
            [550, 509],
            [650, 509],
            [750, 509],
            [848, 509],
            [948, 509],
            [1048, 509],
            [50, 609],
            [150, 609],
            [250, 609],
            [350, 609],
            [450, 609],
            [550, 609],
            [650, 609],
            [750, 609],
            [848, 609],
            [948, 609],
            [1048, 609],
            [50, 709],
            [150, 709],
            [250, 709],
            [350, 709],
            [450, 709],
            [550, 709],
            [650, 709],
            [750, 709],
            [848, 709],
            [948, 709],
            [1048, 709],
            [50, 809],
            [150, 809],
            [250, 809],
            [350, 809],
            [450, 809],
            [550, 809],
            [650, 809],
            [750, 809],
            [848, 809],
            [948, 809],
            [1048, 809],
            [50, 909],
            [150, 909],
            [250, 909],
            [350, 909],
            [450, 909],
            [550, 909],
            [650, 909],
            [750, 909],
            [848, 909],
            [948, 909],
            [1048, 909],
            [50, 1009],
            [150, 1009],
            [250, 1009],
            [350, 1009],
            [450, 1009],
            [550, 1009],
            [650, 1009],
            [750, 1009],
            [848, 1009],
            [948, 1009],
            [1048, 1009]
        ]
    )

    target_points = np.array(
        [
            [2, 1],
            [3, 1],
            [4, 1],
            [5, 1],
            [6, 1],
            [7, 1],
            [8, 1],
            [9, 1],
            [10, 1],
            [11, 1],
            [12, 1],
            [2, 2],
            [3, 2],
            [4, 2],
            [5, 2],
            [6, 2],
            [7, 2],
            [8, 2],
            [9, 2],
            [10, 2],
            [11, 2],
            [12, 2],
            [2, 3],
            [3, 3],
            [4, 3],
            [5, 3],
            [6, 3],
            [7, 3],
            [8, 3],
            [9, 3],
            [10, 3],
            [11, 3],
            [12, 3],
            [2, 4],
            [3, 4],
            [4, 4],
            [5, 4],
            [6, 4],
            [7, 4],
            [8, 4],
            [9, 4],
            [10, 4],
            [11, 4],
            [12, 4],
            [2, 5],
            [3, 5],
            [4, 5],
            [5, 5],
            [6, 5],
            [7, 5],
            [8, 5],
            [9, 5],
            [10, 5],
            [11, 5],
            [12, 5],
            [2, 6],
            [3, 6],
            [4, 6],
            [5, 6],
            [6, 6],
            [7, 6],
            [8, 6],
            [9, 6],
            [10, 6],
            [11, 6],
            [12, 6],
            [2, 7],
            [3, 7],
            [4, 7],
            [5, 7],
            [6, 7],
            [7, 7],
            [8, 7],
            [9, 7],
            [10, 7],
            [11, 7],
            [12, 7],
            [2, 8],
            [3, 8],
            [4, 8],
            [5, 8],
            [6, 8],
            [7, 8],
            [8, 8],
            [9, 8],
            [10, 8],
            [11, 8],
            [12, 8],
            [2, 9],
            [3, 9],
            [4, 9],
            [5, 9],
            [6, 9],
            [7, 9],
            [8, 9],
            [9, 9],
            [10, 9],
            [11, 9],
            [12, 9],
            [2, 10],
            [3, 10],
            [4, 10],
            [5, 10],
            [6, 10],
            [7, 10],
            [8, 10],
            [9, 10],
            [10, 10],
            [11, 10],
            [12, 10]
        ]
    )

    # Create the NearestNDInterpolator object
    interpolator = NearestNDInterpolator(source_points, target_points)

    if(val[0]==0):
        x=0
        y=0
        print(x,y)
        return x, y
    else:
        center_point = val[1:3]

    # Interpolate the query points
        interpolated_values = interpolator(center_point)

        print(interpolated_values)
        x, y = interpolated_values[0]
        return x, y
